require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const app = express();
app.use(express.json());

mongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('Failed to connect to MongoDB', err));

const movieSchema = new mongoose.Schema({
  title: { type: String, required: true },
  director: { type: String, required: true },
  year: { type: Number, required: true },
  id: { type: Number, required: true }
});

const Movie = mongoose.model('Movie', movieSchema, 'movies');

const PORT = process.env.PORT || 3008;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

app.get('/movies', async (req, res) => {
  try {
    const movies = await Movie.find();
    console.log('Movies fetched:', movies);
    res.setHeader('Content-Type', 'application/json');
    res.json(movies);
  } catch (err) {
    console.error(err);
    res.status(500).send(err);
  }
});

app.get('/movies/:id', async (req, res) => {
  try {
    const movie = await Movie.findById(req.params.id);
    res.json(movie);
  } catch (err) {
    console.error(err);
    res.status(500).send(err);
  }
});

app.post('/movies', async (req, res) => {
  try {
    console.log('Request body:', req.body); 
    const newMovie = new Movie(req.body);
    const result = await newMovie.save();
    res.json(result);
  } catch (err) {
    console.error('Error saving new movie:', err); 
    res.status(500).send(err);
  }
});


app.put('/movies/:id', async (req, res) => {
  try {
    const updatedData = req.body;
    const updatedMovie = await Movie.findByIdAndUpdate(req.params.id, updatedData, { new: true });
    res.json(updatedMovie);
  } catch (err) {
    res.status(500).send(err);
  }
});


app.delete('/movies/:id', async (req, res) => {
  try {
    const result = await Movie.findByIdAndDelete(req.params.id);
    res.json(result);
  } catch (err) {
    console.error(err);
    res.status(500).send(err);
  }
});

process.on('uncaughtException', (err) => {
  console.error('There was an uncaught error', err);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});
